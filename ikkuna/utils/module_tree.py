'''
.. module:: module_tree

.. moduleauthor:: Rasmus Diederichsen

This module defines the :class:`ModuleTree` class for easily traversing a module hierarchy in order
to generate unique hierarchical names for all involved modules to be used as dictinary keys.
'''
import re
from collections import defaultdict

NUMBER_REGEX = re.compile(r'\d+')


class ModuleTree(object):

    def __init__(self, module, name=None, drop_name=True, recursive=True):
        # for the root node, it often makes sense not to include the name, since it will not add any
        # information
        if drop_name:
            name = ''
        else:
            # if the name is just the index, assume it's autogenerated by e.g. nn.Sequential and
            # make a better one
            if name is None or re.match(NUMBER_REGEX, name):
                name = module.__class__.__name__.lower()

        self._module = module
        self._name = name
        self._children = []
        self._type_counter = defaultdict(int)

        if recursive:
            named_children = list(module.named_children())
            if named_children:
                for child_name, child in named_children:
                    child_class = child.__class__
                    if re.match(NUMBER_REGEX, child_name):
                        child_name = f'{child_class.__name__.lower()}{self._type_counter[child_class]}'
                    self._children.append(ModuleTree(child,
                                                     name=f'{self._name}/{child_name}',
                                                     drop_name=False,
                                                     recursive=True)
                                          )
                    self._type_counter[child.__class__] += 1

    def preorder(self):
        if not self._children:
            yield (self._name, self._module)
        else:
            for child in self._children:
                yield from child.preorder()
